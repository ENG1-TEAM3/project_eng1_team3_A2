@startuml
class Boot{
{static} Boot INSTANCE
{static} Boot getInstance()
void create()
void createHeadless()
void resize()
SpriteBatch getSpriteBatch()
ShapeRenderer getShapeRenderer()
ScreenController getScreenController()
}



class GameSprites{
    enum SpriteID
    {static} enum TEXTUREATLASES
    {static} GameSprites getInstance()
    createResources()
    String spriteKey(SpriteID spriteID, String spriteName)
    String getSprite(SpriteID spriteID, String spriteName)
    dispose()
}

Boot -down--> ScreenController : Stores instance of
Boot --> Boot : Stores singleton instance of
ScreenController --> Boot : Stores the instance of

note "ALL CAPS means final/constant" as n1
note "Arrows go from the object that is storing to the thing that it is storing" as n2
note "Private attributes / methods ommitted" as n3
class ScreenController{
enum ScreenID
ScreenController(Boot boot, OrthographicCamera gameCam, OrthographicCamera uiCam)
setScreen(ScreenID screenID)
SpriteBatch getSpriteBatch
ShapeRenderer getShapeRenderer
ScreenAdapter getScreen(ScreenID screenID)
resetGameScreen()
pauseGameScreen()
playGameScreen()
}


class GameScreen{
PowerUpHandler powerUpHandler
GameScreen(ScreenController screenController, OrthographicCamera camera)
updateTiming()
setTiming(int totalSecs)
int getTotalSecondsRunningGame()
int getReputation()
int getMoney()
Cook getCurrentCook()
update(float delta, boolean shouldResetKeys)
cameraUpdate()
render(float delta)
renderGame(float delta)
World getWorld()
SaveHandler getSaveHandler()
Array<GameEntity> getGameEntities()
Array<Cook> getCooks()
Cook setCook()
int addCook()
loseReputation()
addMoney()
spendMoney()
long getPreviousSecond()
setPreviousSecond()
addToTimePaused(long amount)
Array<CookInteractable> getInteractables()
addInteractable(CookInteractable cookInteractable)
addGameEntity(GameEntity entity)
addServingStation()
reset()
startGame(int customers)
restoreFromData(Lots of variables go here, omitted for space)
CustomerController getCustomerController()
GameHud getGameHud()
InstructionHud getInstructionHud()
MenuScreen.difficulty getCurrentDifficulty()
MenuScreen.mode getCurrentMode()
int getSecondsPassed()
int getMinutesPassed()
int getHoursPassed()
}

ScreenController --> GameScreen : Stores instance of
GameScreen --> ScreenController : Stores instance of
class CreditsScreen{
CreditsScreen(ScreenController screenController, OrthographicCamera camera)
update(float delta, boolean shouldResetKeys)
render(float delta)
setPrevScreenID(ScreenID scID)
}

ScreenController --> CreditsScreen : Stores instance of
CreditsScreen --> ScreenController : Stores instance of

class GameOverScreen{
GameOverScreen(ScreenController screenController, OrthographicCamera camera)
update(float delta, boolean shouldResetKeys)
render(float delta)
setTime(int hours, int minutes, int seconds)
setTextLabel(String text)
}


ScreenController --> GameOverScreen : Stores instance of
GameOverScreen --> ScreenController : Stores instance of
class InstructionScreen{
InstructionScreen(ScreenController screenController, OrthographicCamera camera)
update(float delta, boolean shouldResetKeys)
render(float delta)
setPrevScreenID(ScreenID scID)
}
ScreenController --> InstructionScreen : Stores instance of
InstructionScreen --> ScreenController : Stores instance of

class MenuScreen{
enum menuState
enum modeSelectionState
enum mode
enum difficulty
enum saveFileSelectionChoice

menuState currentState
modeSelectionState currentSelectionType
mode currentModeSelection
difficulty currentDifficultySelection
saveFileSelectionChoice currentSave

MenuScreen(ScreenController screenController, OrthographicCamera camera)
update(float delta, boolean shouldResetKeys)
render(float delta)
menuState getCorrectSwapModeSelect()
menuState getCorrectSwapLoadSelect()
setCurrentScreenState(menuState ms)
Stage getCurrentScreenStage()
String getSelectionString()
difficulty cycleDifficulty(int direction)
mode cycleMode()
{static} ArrayList<saveFileSelectionChoice> findSaves()
{static} saveFileSelectionChoice cycleSaves(saveFileSelectionChoice currentSave, int direction, boolean checkExistence)


}

ScreenController --> MenuScreen : Stores instance of
MenuScreen --> ScreenController : Stores instance of

class PauseScreen{
PauseScreen(ScreenController screenController, OrthographicCamera camera)
update(float delta, boolean shouldResetKeys)
render(float delta)
}

ScreenController --> PauseScreen : Stores instance of
PauseScreen --> ScreenController : Stores instance of
PauseScreen --> GameScreen : Stores instance of




@enduml